00. C++ 设计模式 - 简介
可复用（目标）面向对象（具体方法）软件的基础

1、什么是设计模式？
每一个模式描述了不断重复发生的问题，以及解决该问题的解决方案，这样我们可以重复使用该方案而不必重复劳动（重复做轮子）。

2，深入理解面向对象
封装：隐藏内部实现
继承：复用现有代码
多态：改写对象行为

3、软件复杂性的根本原因（变化）
需求变化
技术平台变化
...

4、如果解决复杂性
分解：如C语言，将大问题分解成多个小问题
抽象：选择忽视非本质的属性，而区处理泛化和理想化的对象模型

5、软件设计的目标
复用

6、面向对象的八大设计原则（是尺子）

1> 依赖倒置原则（DIP）
1) 高层模块（稳定）不依赖于底层模块（易变化），二者都应该依赖于抽象（稳定）
2) 抽象（稳定）不依赖于实现细节（易变化），实现细节应该依赖于抽象（稳定）。

示例：
UI 依赖了 Line, Rect （Line，Rect不稳定，易于变化）
UI 依赖了 Shape（抽象，稳定）
Line，Rect 依赖了Shape（抽象，稳定）

2> 开闭原则
1) 扩展开放，更改封闭
2) 类模块应该可扩展，但不可修改

3> 单一职责原则
1) 一个类的变化应该仅有一个，变化的方向隐含着类的责任

4> 里氏替换
1) 子类可以替换父类（IS-A），如果无法替换，考虑子类不应该继承，而应该组合的形式

5> 接口隔离原则
1) 接口应该小而完备，不应该强迫客户程序依赖他们不用的方法
（如果只是本类使用，private，如果是子类使用protected）如果使用public，使用该类的客户程序很可能就会依赖他们，那就需要本类保持稳定

6> 优先对象组合，而不是继承（组合：class A内部放一个class b的对象，或指针）
1）类继一定程度上破坏了封装
2）子类和父类的耦合度比较高，而对象组合则要求被组合的对象具有良好的接口就可以，耦合度低

7> 封装变化
1) 使用封装来创建对象之间的分界层，

8> 针对接口编程，而不是实现
1）不将变量类型声明为某个特定的具体类，而是声明为某个接口（只针对业务类，比如vector<Shape*> shapeVector)
2）客户程序无需获知对象的具体类型，只需要知道对象所具有的接口
3）减少系统各部分的依赖关系，实现高内聚，松耦合

7、重构关键技法
静态         -> 动态
早绑定       -> 晚绑定
继承         -> 组合
编译时依赖    -> 运行时依赖
紧耦合       -> 松耦合
